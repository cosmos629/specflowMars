// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowTests.AcceptanceTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Task1_DoNotRun_TestCasesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Task1_DoNotRun_TestCases.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Task1_DoNotRun_TestCases", "\tIn order to update my profile \r\n\tAs a skill trader\r\n\tI want to add the languages" +
                    " that I know", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Task1_DoNotRun_TestCases")))
            {
                global::SpecflowTests.AcceptanceTest.Task1_DoNotRun_TestCasesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInSkillsAfterFillingOutAllTheDetails(string addSkill, string skillLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddSkill"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to add new by clicking \"Add\" button in Skills after f" +
                    "illing out all the details", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
testRunner.When("I click on Skills tab button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
testRunner.And("I click Add New button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
testRunner.And(string.Format("I have completed the form with {0} and {1}.", addSkill, skillLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
testRunner.And("I click the Add button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
testRunner.Then("I should see the skill I have added.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to add new by clicking \"Add\" button in Skills after f" +
            "illing out all the details: Selenium")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddSkill")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Selenium")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AddSkill", "Selenium")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:SkillLevel", "Expert")]
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInSkillsAfterFillingOutAllTheDetails_Selenium()
        {
#line 7
this.CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInSkillsAfterFillingOutAllTheDetails("Selenium", "Expert", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInEducationAfterFillingOutAllTheDetails(string nameCollUni, string country, string title, string degree, string yearGraduation, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddEducation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to add new by clicking \"Add\" button in Education afte" +
                    "r filling out all the details", null, @__tags);
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
testRunner.When("I click on Education tab button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
testRunner.And("I click Add New button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
testRunner.And(string.Format("I have completed the form with {0} and {1} and {2} and {3} and {4}.", nameCollUni, country, title, degree, yearGraduation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
testRunner.And("I click the Add button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.Then("I should see the Education I have added.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to add new by clicking \"Add\" button in Education afte" +
            "r filling out all the details: AIS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddEducation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "AIS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NameCollUni", "AIS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Country", "New Zealand")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Title", "B.A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Degree", "Software")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:YearGraduation", "2016")]
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInEducationAfterFillingOutAllTheDetails_AIS()
        {
#line 20
this.CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInEducationAfterFillingOutAllTheDetails("AIS", "New Zealand", "B.A", "Software", "2016", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInCertificationAfterFillingOutAllTheDetails(string certificate, string certifiedFrom, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddCertification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to add new by clicking \"Add\" button in Certification " +
                    "after filling out all the details", null, @__tags);
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 34
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
testRunner.When("I click on Certificaton tab button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.And("I click Add New button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
testRunner.And(string.Format("I have completed the form with {0} and {1} and {2}.", certificate, certifiedFrom, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
testRunner.And("I click Add button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
testRunner.Then("I should see the Cerification I have added.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to add new by clicking \"Add\" button in Certification " +
            "after filling out all the details: Excel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AddCertification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Excel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Certificate", "Excel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CertifiedFrom", "MS")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Year", "2017")]
        public virtual void CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInCertificationAfterFillingOutAllTheDetails_Excel()
        {
#line 33
this.CheckIfTheSellerIsAbleToAddNewByClickingAddButtonInCertificationAfterFillingOutAllTheDetails("Excel", "MS", "2017", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToChangeAvailabilityByClickingSmallWriteIcon(string time, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Availability"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to change Availability by clicking small write icon", null, @__tags);
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 47
testRunner.Given("I am on the Pofile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
testRunner.When("I click small write icon for Availability.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
testRunner.And(string.Format("I click {0} of the list from drop down box.", time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
testRunner.Then("I should see the updated Availability.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to change Availability by clicking small write icon: " +
            "Part Time")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Availability")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Part Time")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Time", "Part Time")]
        public virtual void CheckIfTheSellerIsAbleToChangeAvailabilityByClickingSmallWriteIcon_PartTime()
        {
#line 46
this.CheckIfTheSellerIsAbleToChangeAvailabilityByClickingSmallWriteIcon("Part Time", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToChangeHoursByClickingSmallWriteIcon(string hours, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Hours"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to change Hours by clicking small write icon", null, @__tags);
#line 57
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 58
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
testRunner.When("I click small write icon for Hours.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
testRunner.And(string.Format("I click {0} of the list from drop down box.", hours), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
testRunner.Then("I should see the updated Hours.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to change Hours by clicking small write icon: Less th" +
            "an 30hours a week")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hours")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Less than 30hours a week")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Hours", "Less than 30hours a week")]
        public virtual void CheckIfTheSellerIsAbleToChangeHoursByClickingSmallWriteIcon_LessThan30HoursAWeek()
        {
#line 57
this.CheckIfTheSellerIsAbleToChangeHoursByClickingSmallWriteIcon("Less than 30hours a week", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToChangeEarnTargetByClickingSmallWriteIcon(string earnTarget, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EarnTarget"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to change Earn Target by clicking small write icon", null, @__tags);
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 69
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
testRunner.When("I click small write icon for Earn Target.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
testRunner.And(string.Format("I click {0}.", earnTarget), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
testRunner.Then("I should see the updated Earn Target.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to change Earn Target by clicking small write icon: B" +
            "etween $500 and $1000 per month")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EarnTarget")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Between $500 and $1000 per month")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EarnTarget", "Between $500 and $1000 per month")]
        public virtual void CheckIfTheSellerIsAbleToChangeEarnTargetByClickingSmallWriteIcon_Between500And1000PerMonth()
        {
#line 68
this.CheckIfTheSellerIsAbleToChangeEarnTargetByClickingSmallWriteIcon("Between $500 and $1000 per month", ((string[])(null)));
#line hidden
        }
        
        public virtual void CheckIfTheSellerIsAbleToUpdateTheInformationByClickingSmallWriteIconForCertification(string certificate, string certifiedFrom, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UpdateCertification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if the seller is able to update the information by clicking small write ico" +
                    "n for Certification", null, @__tags);
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 80
testRunner.Given("I am on the Profile page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
testRunner.When("I click on Certificaton tab button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
testRunner.And("I click write small icon for Certification.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
testRunner.And(string.Format("I have changed with {0} and {1} and {2}.", certificate, certifiedFrom, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
testRunner.And("I click Update button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
testRunner.Then("I should see the updated information for Cerification.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check if the seller is able to update the information by clicking small write ico" +
            "n for Certification: Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Task1_DoNotRun_TestCases")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UpdateCertification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Certificate", "Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CertifiedFrom", "ISTQB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Year", "2018")]
        public virtual void CheckIfTheSellerIsAbleToUpdateTheInformationByClickingSmallWriteIconForCertification_Testing()
        {
#line 79
this.CheckIfTheSellerIsAbleToUpdateTheInformationByClickingSmallWriteIconForCertification("Testing", "ISTQB", "2018", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
